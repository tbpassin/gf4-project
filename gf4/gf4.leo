<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="tom.20211211170510.1"><vh>GF4 Files</vh>
<v t="tom.20220411232217.1"><vh>Administrative and License</vh>
<v t="tom.20220411133313.1"><vh>@clean Copyright_and_Authorship.txt</vh></v>
<v t="tom.20220411133954.1"><vh>@clean Software_License.txt</vh></v>
<v t="tom.20220411171338.1"><vh>@clean ABOUT.txt</vh></v>
</v>
<v t="tom.20211211170532.1"><vh>Program files</vh>
<v t="tom.20211207165051.2"><vh>@file gf4.pyw</vh></v>
<v t="tom.20211211170701.2"><vh>@file AbstractPlotMgr.py</vh></v>
<v t="tom.20211211170819.2"><vh>@file BuildCommands.py</vh></v>
<v t="tom.20211211170819.6"><vh>@file buttondefs.py</vh></v>
<v t="tom.20211211170819.23"><vh>@file colors.py</vh></v>
<v t="tom.20211211170819.26"><vh>@file createMenus.py</vh></v>
<v t="tom.20211211170819.9"><vh>@file cmdwin.py</vh></v>
<v t="tom.20211211170820.45"><vh>@file editDialog.py</vh></v>
<v t="tom.20211211170819.30"><vh>@file curve_generators.py</vh></v>
<v t="tom.20211211170820.2"><vh>@file Dataset.py</vh></v>
<v t="tom.20211211171304.2"><vh>@file entry.py</vh></v>
<v t="tom.20211211181438.12"><vh>@file fits.py</vh></v>
<v t="tom.20211211181438.2"><vh>@file fit_test.py</vh></v>
<v t="tom.20220411202149.1"><vh>@file help.py</vh></v>
<v t="tom.20221107232208.1"><vh>@file help_cmds.py</vh></v>
<v t="tom.20220829232158.1"><vh>@file import_plugins.py</vh></v>
<v t="tom.20211211171304.51"><vh>@file Linestyle.py</vh></v>
<v t="tom.20211211171304.65"><vh>@file MakeWaveforms.py</vh></v>
<v t="tom.20211211171913.2"><vh>@file Plot.py</vh></v>
<v t="tom.20211211171913.6"><vh>@file randnum.py</vh></v>
<v t="tom.20211211171913.12"><vh>@file smoother.py</vh></v>
<v t="tom.20220511095316.1"><vh>@file stackview.py</vh></v>
<v t="tom.20211211171913.40"><vh>@file stats.py</vh></v>
<v t="tom.20211211171913.51"><vh>@file Timehack.py</vh></v>
<v t="tom.20211211171913.55"><vh>@file trend.py</vh></v>
<v t="tom.20221027233021.1"><vh>@file utility.py</vh></v>
<v t="tom.20220506081351.1"><vh>@file versions.py</vh></v>
<v t="tom.20220829181040.1"><vh>@path plugins</vh>
<v t="tom.20221105083713.1"><vh>Infrastructure</vh>
<v t="tom.20220830215645.1"><vh>@clean README.txt</vh>
<v t="tom.20220830223226.1"><vh>What A Plugin Should Import</vh></v>
<v t="tom.20220830223435.1"><vh>What A Plugin Must Include</vh></v>
<v t="tom.20220830224004.1"><vh>How To Specify Which Plugins To Use</vh></v>
</v>
<v t="tom.20220830112255.1"><vh>@clean use_plugins.txt</vh></v>
<v t="tom.20220830184545.1"><vh>@file require_datasets.py</vh></v>
</v>
<v t="tom.20220829181057.1"><vh>@file test_plugin.py</vh></v>
<v t="tom.20220830135417.1"><vh>@file double_x.py</vh></v>
<v t="tom.20221106223828.1"><vh>@file calculator.py</vh></v>
<v t="tom.20220831132228.1"><vh>@file convolve1.py</vh></v>
<v t="tom.20220903150123.1"><vh>@file correl1.py</vh></v>
<v t="tom.20221101105447.1"><vh>@file autocorrel1.py</vh></v>
<v t="tom.20220904105233.1"><vh>@file find_peak.py</vh></v>
<v t="tom.20220905122752.1"><vh>@file find_peak1.py</vh></v>
<v t="tom.20220909175119.1"><vh>@file readout.py</vh></v>
<v t="tom.20221104193114.1"><vh>@file take_snapshot.py</vh></v>
<v t="tom.20221104194114.1"><vh>@file restore_snapshot.py</vh></v>
<v t="tom.20221105131948.1"><vh>@file undo-save.py</vh></v>
<v t="tom.20221105143807.1"><vh>@file undo.py</vh></v>
<v t="tom.20221112235319.1"><vh>@file norm_cdf.py</vh></v>
<v t="tom.20221115225742.1"><vh>@file local_poly_fit.py</vh></v>
<v t="tom.20221120044718.1"><vh>@file low_quad.py</vh></v>
<v t="tom.20221121191416.1"><vh>@file poly_lowess.py</vh></v>
<v t="tom.20221124112244.1"><vh>@file show_sigma.py</vh></v>
<v t="tom.20230104000405.1"><vh>@file lst_sqr_extrap.py</vh></v>
</v>
</v>
<v t="tom.20221211135219.1"><vh>Config File</vh>
<v t="tom.20221211135236.1"><vh>@clean config/gf4.ini</vh></v>
</v>
<v t="tom.20220506082557.1"><vh>Tests</vh>
<v t="tom.20211207165011.1"><vh>Smoother and Tests</vh>
<v t="tom.20211211171913.12"></v>
<v t="tom.20211206195731.2"><vh>@file test_smooth.py</vh></v>
<v t="tom.20211206205420.2"><vh>@file testing/smoother_tests.py</vh></v>
</v>
</v>
<v t="tom.20221121171302.1"><vh>Experimental</vh>
<v t="tom.20221128184455.1"><vh>@path experimental</vh>
<v t="tom.20221121171312.1"><vh>@file lowess_poly.py</vh></v>
<v t="tom.20221128184351.1"><vh>@file lowess_quad.py</vh></v>
</v>
</v>
<v t="tom.20220816175920.1"><vh>Install Problems</vh>
<v t="tom.20220816175933.1"><vh>Linux</vh>
<v t="tom.20220816180207.1"><vh>No tkinter</vh></v>
<v t="tom.20220816175947.1"><vh>cannot import name 'ImageTK'</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="tom.20211207165011.1"></t>
<t tx="tom.20211211170510.1"></t>
<t tx="tom.20211211170532.1"></t>
<t tx="tom.20220411133313.1">The software in this GF4 project is writtten by and copyrighted by: Thomas B. Passin 2014 - 2022.
</t>
<t tx="tom.20220411133954.1">The GF4 software package is covered by the standard MIT license, reproduced below:

The MIT License (MIT)
Copyright © 1992 - 2022 Thomas B. Passin

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</t>
<t tx="tom.20220411171338.1">GF4 is a computer program for visualizing and processing two-dimensional data
such as X-Y and time series data. The user interface is modeled after a
reverse-polish notation (RPN) style of desk calculator, with the roles of
numbers being replaced by 2D data sets.

As in Hewlett-Packard RPN calculators, the stack bottom is called "X", the stack
position above that is called "Y", and the top of the stack is called "T". Data
sets may be pushed, popped, or rotated on the stack. GF4's stack has a depth of
three.

The main program is called "gf4.pyw".</t>
<t tx="tom.20220411232217.1"></t>
<t tx="tom.20220506082557.1"></t>
<t tx="tom.20220816175920.1"></t>
<t tx="tom.20220816175933.1"></t>
<t tx="tom.20220816175947.1">See 

https://stackoverflow.com/questions/44835909/cannot-import-name-imagetk-python-3-5

On Debian, this fixed this problem::

    sudo apt-get install python3-pil.imagetk

On CentOS/RHEL, the packages to install with the package manager are (*pillow*
has replaced the imaging library *PIL*)::

    python3-pillow
    python3-pillow-tk
</t>
<t tx="tom.20220816180207.1">On Debian/Ubuntu, tkinter has to be installed by the package manager::

    sudo apt-get install python3-tk

Apparently this may also be the case with some non-Debian systems.
The package manager command will be different.  For the Yum package manager 
(you might have to use sudo, su root, or its equivalent to get administrative
permissions) - see https://riptutorial.com/tkinter/example/3206/installation-or-setup::

    yum install tkinter

</t>
<t tx="tom.20220829181040.1"></t>
<t tx="tom.20220830112255.1"># The list of plugins to import. Omit the ".py" extension.
find_peak
readout
calculator
local_poly_fit
poly_lowess
show_sigma
low_quad
lst_sqr_extrap</t>
<t tx="tom.20220830215645.1">GF4 has a plugin mechanism that can load plugin files located in the "plugins"
directory.  This README provides some basic information for developers of plugins.

WHAT A PLUGIN PROVIDES
-----------------------
Each plugin can supply a single command together with a matching command
button for the button window.  By default, the command button will be placed
into a "Plugins" group in the command window.

A plugin can be made to override an existing command.  Optionally, a plugin
can place its command button into any existing button group.

A plugin can also add a section to the extended help facility.  Its button will
show the hover color that indicates there is an extended help entry.  Right-
clicking the plugin's button will display its extended help message in
the system browser.

@others


</t>
<t tx="tom.20220830223226.1">WHAT A PLUGIN SHOULD IMPORT
---------------------------
In addition to whatever modules the plugin may need for its operation, if it
will work with datasets that are managed by the PlotManager, it should import
helper attributes, usually MAIN and BUFFER, which identify the key stack
positions. Typically:

from AbstractPlotMgr import MAIN, BUFFER

If you want to make sure there is a dataset in the MAIN or MAIN+BUFFER positions,
then import these functions from the module "require_dataset" in the plugins
directory:

from .require_datasets import has_main
# or possibly:
from .require_datasets import has_main_buffer

These functions perform the same jobs as the PlotManager decorators
@REQUIRE_MAIN and @REQUIRE_MAIN_BUFF.  Other useful declarations may be found
in the "AbstractPlotMgr" module.

</t>
<t tx="tom.20220830223435.1">WHAT A PLUGIN MUST INCLUDE
---------------------------
Each plugin must provide a tuple named "BUTTON_DEF".  The tuple must contain
three elements: Button label, the command name, and an explanatory help text.
The help text will appear in the top information band when the mouse hovers
over the button.  Example:

#                Label       Cmd name          Help text
BUTTON_DEF  = ('Double X', 'double-x', 'Double y values of the X dataset')

Each plugin must also provide a function that will perform its operation.
This function must be named "proc" and take no parameters. The function is not
expected to return anything.  For example:

# plotmgr will have been injected into the module by the time this is called
def proc():
    if not has_main(plotmgr):  # Do nothing if no data
        return
    _ds = plotmgr.stack[MAIN]  # The "X" Dataset
    _ds.scale(2)
    plotmgr.plot()

The "plotmgr" attribute represents the active PlotManager instance. Do not try
to import it; it will be automatically injected into the module's attributes
when the command is created.

Optionally the plugin may define

OVERRIDE = True

If this attribute exists in the module and has the value True, if that command
name already exists in the command dictionary, the previous assignment will be
replaced by the new one. This provides a way to override an existing command.

To have the plugin's button added to an existing button group instead of the
Plugins group, use its name from buttondefs.py, assign that name to the
attribute OWNER_GROUP, and set OVERRIDE to True.  Example:

OVERRIDE = True
OWNER_GROUP = 'DATA_PROCESSING_BUTTONS'

To add an item to the extended help, a plugin must import HELP_TEXT:

from help_cmds import HELPTEXT

HELPTEXT is a dictionary keyed by the command name.  Add a dictionary entry as
in this example:

HELPTEXT['lst-sqr-extrap'] = """Extended Help string here.  Any formatting
supported by RestructuredText can be used here.
"""</t>
<t tx="tom.20220830224004.1">HOW TO SPECIFY WHICH PLUGINS TO USE
-----------------------------------
By default, GF4 will load all plugins (i.e., python files) in the "plugins"
directory.  You can override this by including a file named "use_plugins.txt".
The file should contain the desired plugins by file name, one to a line.
The ".py" file extension may optionally be omitted.  Blank lines and lines that
start with a "#" or ";" character will be ignored.
</t>
<t tx="tom.20221105083713.1"></t>
<t tx="tom.20221121171302.1"></t>
<t tx="tom.20221128184455.1"></t>
<t tx="tom.20221211135219.1"></t>
<t tx="tom.20221211135236.1">; GF4 configuration file
[colors]
; Override initial colors using MatPlotLib CSSS4 color names or #xxyyzz hex values.
; main-line-color = red
; buffer-line-color = gray
</t>
</tnodes>
</leo_file>
